<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger" xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core 
		http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/ee/core 
		http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
		http://www.mulesoft.org/schema/mule/salesforce 
		http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
	">

	<flow name="queryOrder" doc:id="9508f5fc-7ee2-4845-9a0d-00718f6893e3">
		<ee:transform doc:name="Where Filter">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="soqlFilter"><![CDATA[%dw 2.0
import modules::soql

var sqlFilter1 = soql::soqlBuilder("", "AND",
        soql::stringParameter("poNumber__c", vars.poNumber))
var sqlFilter2 = soql::soqlBuilder(sqlFilter1, "AND",
        soql::stringParameter("Id", vars.orderId))
output application/json
---
sqlFilter2]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<salesforce:query 
			doc:name="Order" 
			config-ref="GlobalSalesforceConfig">
			
			<salesforce:salesforce-query><![CDATA[SELECT id, poNumber__c, signatureRequiredFlag__c, shipInstructions__c,
  giftWrapFlag__c, giftWrapMessage__c, currencyCode__c, 
  subTotal__c, email__c, Name, customerId__c
FROM Order__c
:soqlFilter]]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
---
{
	soqlFilter : vars.soqlFilter
}]]]></salesforce:parameters>
		</salesforce:query>

		<ee:transform doc:name="Order Payload">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output json

---
payload map (item, value) ->
{
    poNumber: item.poNumber__c,
    signatureRequiredFlag: item.signatureRequiredFlag__c,
    shipInstructions: item.shipInstructions__c,
    giftWrapFlag: item.giftWrapFlag__c,
    giftWrapMessage: item.giftWrapMessage__c,
    currencyCode: item.currencyCode__c,
    subTotal: item.subTotal__c,
    email: item.email__c,
    orderId: item.Id,
    customerId: item.customerId__c    
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>

		<error-handler>
			<on-error-propagate 
				enableNotifications="true" 
				logException="true"
				doc:name="On Error Propagate">
				
				<set-variable 
					value="500" 
					doc:name="status 500" 
					variableName="httpStatus" />
				
				<ee:transform doc:name="Error Message">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  message: "There was a problem while trying to access the backend repository"
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>

	<flow name="get:\orders">
		<json-logger:log-start doc:name="Log start" doc:id="fb391f4e-2186-42c3-8669-55b31d438722" config-ref="JSON_Logger_Config" message='#["Get order by poNumber=" ++ attributes.queryParams.poNumber]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule
import * from dw::util::Values
output application/json
---
{
    openTelemetry: JSONLoggerModule::stringifyNonJSON(vars.OTEL_TRACE_CONTEXT default "") 
}]]]></json-logger:content>
		</json-logger:log-start>
		
		<set-variable 
			value='#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;    "poNumber": attributes.queryParams.poNumber default ""&#10;}]' 
			doc:name="otel Tags" 
			variableName="openTelemetryTags" />
		
		<set-variable 
			value="#[attributes.queryParams.poNumber]"
			doc:name="poNumber"
			variableName="poNumber"/>
		
		<flow-ref doc:name="queryOrder" name="queryOrder"/>
	</flow>

	<flow name="get:\orders\(orderId)">
		<json-logger:log-start doc:name="Log start" doc:id="faccbcf8-0735-40f7-8444-bac41fb15fe4" config-ref="JSON_Logger_Config" message='#["Get order orderId=" ++ attributes.uriParams.orderId]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule
import * from dw::util::Values
output application/json
---
{
    openTelemetry: JSONLoggerModule::stringifyNonJSON(vars.OTEL_TRACE_CONTEXT default "") 
}]]]></json-logger:content>
		</json-logger:log-start>

		<set-variable
			value='#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;    "orderId": attributes.uriParams.orderId default ""&#10;}]' 
			doc:name="otel Tags" 
			variableName="openTelemetryTags" />
		<set-variable 
			value="#[attributes.uriParams.orderId]"
			doc:name="orderId" 
			variableName="orderId"/>
		
		<flow-ref 
			doc:name="queryOrder" 
			name="queryOrder" />
		
		<ee:transform doc:name="get Order">
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload[0] default '']]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
